import datetime as dt
from datetime import timedelta
from airflow import DAG
from airflow.operators.bash_operator import BashOperator
from airflow.operators.python_operator import PythonOperator
import pandas as pd
from sqlalchemy import create_engine
import psycopg2 
import io

def exrtract_data():
    df_exploits = pd.read_csv('https://raw.githubusercontent.com/offensive-security/exploitdb/master/files_exploits.csv')
    engine = create_engine('postgresql://airflow:airflow@postgres/exploits_DB')
    df_exploits.to_sql('exploits_raw', engine, if_exists = 'replace')
    
def transform_data():
    engine = create_engine('postgresql://airflow:airflow@postgres/exploits_DB')
    query = "select * from exploits_raw"
    df = pd.read_sql_query(query, engine)
    df[['product','description']] =  df['description'].str.split('-', 1, expand=True)
    df_temp = df['product'].str.split(r'\s+(?=\d)', expand=True)
    df_temp = pd.concat([df_temp[df_temp.columns[:1]], df_temp[df_temp.columns[1:]].apply(
    lambda x: ','.join(x.astype(str)),
    axis=1).str.replace(',None','').to_frame()], axis=1)
    df_temp.columns = ['product', 'version']
    df = pd.concat([df.drop('product', 1), df_temp], axis=1)
    df.to_sql('exploits', engine, if_exists = 'replace')
    
default_args = {
    'owner': 'mhd',
    'start_date': dt.datetime(2021, 5, 17),
    'retries': 1,
    'retry_delay': dt.timedelta(minutes=12)
    
}

with DAG('loadExploitsData',
        default_args=default_args,
        catchup=False,
        schedule_interval=timedelta(hours=24)) as dag:
    
        exrtract_data = PythonOperator(
            task_id='exrtractData',
            python_callable=exrtract_data,
            provide_context=False
        )

        transform_data = PythonOperator(
            task_id='transformData',
            python_callable=transform_data,
            provide_context=False
        )

        exrtract_data >>  transform_data
