import datetime as dt
from datetime import timedelta
from airflow import DAG
from airflow.operators.bash_operator import BashOperator
from airflow.operators.python_operator import PythonOperator
import pandas as pd
import psycopg2 
import io
from sqlalchemy import create_engine
import nmap
import smtplib
import paramiko

# host = '192.168.100.35'
host = '192.168.1.77'
def scan_host(**context):
    nm = nmap.PortScanner() 
    nm.scan(host)
    host_1 = nm.all_hosts()[0]
    ports_info = []
    for proto in nm[host_1].all_protocols():
        lport = nm[host_1][proto].keys()
        sorted(lport)
        for port in lport:
            ports_info.append({"port": port, "state": nm[host_1][proto][port]['state'], "product": nm[host_1][proto][port]['product'], "version": nm[host_1][proto][port]['version']})
    print(ports_info)        
    context['ti'].xcom_push(key='ports', value=ports_info)

def scan_db(**context):
    engine = create_engine('postgresql://airflow:airflow@postgres/exploits_DB')
    ports_info = context['ti'].xcom_pull(key='ports')
    list_dfs = []
    for item in ports_info:
        query = "select file, description, product from exploits where LOWER(product) like LOWER('%%{}%%') AND LOWER(version) like LOWER('%%{}%%')".format(item['product'], item['version'])
        df_temp = pd.read_sql_query(query, engine).head(1)
        df_temp['port'] = item['port']
        list_dfs.append(df_temp)
    df_result=pd.concat(list_dfs) 
    df_result = df_result.to_dict('records')
    print(df_result)
    context['ti'].xcom_push(key='exploits', value=df_result)
    
def kill_process(**context):
    client = paramiko.SSHClient()
    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    client.connect(host, username='msfadmin', password='msfadmin')
    exploits_info = context['ti'].xcom_pull(key='exploits')
    for item in exploits_info:
        port = int(item['port'])
        stdin, stdout, stderr = client.exec_command(f'echo msfadmin | sudo -S kill -9 $(sudo -S lsof -t -i:{port})')
        for line in stdout:
            print(line)
        for line in stdout:
            print(line)
    print('successfully Killed the processes')
    client.close()    

def send_email(**context):
    exploits_info = context['ti'].xcom_pull(key='exploits')
    user="pythonairflow@gmail.com"
    pwd="6,R27/QhPaA:qh#p"
    recipient="mohocp@gmail.com"
    subject="Security Action was Taken"
    body="The following actions was taken:"
    for item in exploits_info:
        link = "https://raw.githubusercontent.com/offensive-security/exploitdb/master/"+item['file']
        text = f"The Process Killed: {item['product']}\nOn port: {item['port']}\nReason: {item['description']}\nExploits details: {link}\n"
        text += "--------------------------------------------------------------------------------------\n"
        body += text
    FROM = user
    TO = recipient if isinstance(recipient, list) else [recipient]
    SUBJECT = subject
    TEXT = body
    message = """From: %s\nTo: %s\nSubject: %s\n\n%s
    """ % (FROM, ", ".join(TO), SUBJECT, TEXT)
    server_ssl = smtplib.SMTP_SSL("smtp.gmail.com", 465)
    server_ssl.ehlo() # optional, called by login()
    server_ssl.login(user, pwd)  
    server_ssl.sendmail(FROM, TO, message)
    server_ssl.close()
    print('successfully sent the mail')
    
default_args = {
    'owner': 'mhd',
    'start_date': dt.datetime(2021, 5, 17),
    'retries': 1,
    'retry_delay': dt.timedelta(minutes=5)
}

with DAG('nmapScan',
        default_args=default_args,
        catchup=False,
        schedule_interval=timedelta(hours=12)) as dag:
    
        scan_host = PythonOperator(
            task_id='ScanHost',
            python_callable=scan_host,
            provide_context=True
        )

        scan_db = PythonOperator(
            task_id='ScanDB',
            python_callable=scan_db,
            provide_context=True
        )
        
        kill_process = PythonOperator(
            task_id='kill_process',
            python_callable=kill_process,
            provide_context=True
        )
        
        send_email = PythonOperator(
            task_id='send_email',
            python_callable=send_email,
            provide_context=True
        )

        scan_host >>  scan_db
        scan_db >> kill_process
        scan_db >> send_email
